name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job de vérification des versions et sécurité
  security-check:
    name: 🔒 Vérification Sécurité & Versions
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Audit des dépendances
        run: pnpm audit --audit-level moderate

      - name: 📊 Vérification des versions
        run: |
          echo "🔍 Vérification des versions verrouillées..."
          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "❌ pnpm-lock.yaml manquant"
            exit 1
          fi
          echo "✅ pnpm-lock.yaml présent"
          
          # Vérifier que toutes les versions sont exactes (pas de ^ ou ~)
          if grep -r '"version": "^' package.json; then
            echo "❌ Versions non verrouillées détectées dans package.json"
            exit 1
          fi
          echo "✅ Toutes les versions sont verrouillées"

  # Job de qualité de code
  code-quality:
    name: 🎯 Qualité de Code
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Linting
        run: pnpm lint

      - name: 🎨 Format check
        run: pnpm format:check

      - name: 📝 Type check
        run: pnpm type-check

      - name: 📊 Code coverage
        run: pnpm test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job de tests unitaires et d'intégration
  unit-tests:
    name: 🧪 Tests Unitaires & Intégration
    runs-on: ubuntu-latest
    needs: security-check
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests
        run: pnpm test

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: coverage/

  # Job de tests E2E
  e2e-tests:
    name: 🌐 Tests E2E
    runs-on: ubuntu-latest
    needs: [security-check, unit-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: pnpm build

      - name: 🚀 Start application
        run: pnpm preview &
        env:
          VITE_API_URL: http://localhost:4173

      - name: ⏳ Wait for app to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:4173; do sleep 1; done'

      - name: 🌐 Run E2E tests
        run: pnpm test:e2e
        env:
          CYPRESS_baseUrl: http://localhost:4173

      - name: 📊 Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-results
          path: cypress/videos/ cypress/screenshots/

  # Job de build et déploiement
  build:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    needs: [security-check, code-quality, unit-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📋 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: pnpm build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: 🚀 Deploy to staging
        if: github.ref == 'refs/heads/develop'
        run: echo "Deploy to staging environment"

      - name: 🚀 Deploy to production
        if: github.ref == 'refs/heads/main'
        run: echo "Deploy to production environment"

  # Job de notification
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    steps:
      - name: 📧 Send notification
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ Build successful - notification sent"
          else
            echo "❌ Build failed - notification sent"
          fi 